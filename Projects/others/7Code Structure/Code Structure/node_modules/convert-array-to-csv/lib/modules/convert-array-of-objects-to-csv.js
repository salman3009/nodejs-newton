"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertArrayOfObjectsToCSV = void 0;

var _checkSpecialCharsAndEmpty = require("../helpers/check-special-chars-and-empty");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var convertArrayOfObjectsToCSV = function convertArrayOfObjectsToCSV(data, _ref) {
  var header = _ref.header,
      separator = _ref.separator;

  var array = _toConsumableArray(data);

  var csv = '';

  if (header) {
    header.forEach(function (headerEl, i) {
      var includesSpecials = (0, _checkSpecialCharsAndEmpty.checkSpecialCharsAndEmpty)(headerEl);
      csv += (includesSpecials ? "\"".concat(headerEl, "\"") : headerEl) + (Object.keys(header).length - 1 === i ? '' : separator) + (Object.keys(header).length - 1 === i ? '\n' : '');
    });
  }

  array.forEach(function (row, idx) {
    if (!header && idx === 0) {
      Object.keys(row).forEach(function (key, i) {
        var value = key || '';
        var includesSpecials = (0, _checkSpecialCharsAndEmpty.checkSpecialCharsAndEmpty)(value);
        csv += (includesSpecials ? "\"".concat(value, "\"") : value) + (Object.keys(row).length - 1 === i ? '' : separator) + (Object.keys(row).length - 1 === i ? '\n' : '');
      });
    }

    Object.keys(row).forEach(function (key, i) {
      var value = row[key] || '';
      var includesSpecials = (0, _checkSpecialCharsAndEmpty.checkSpecialCharsAndEmpty)(value);
      csv += (includesSpecials ? "\"".concat(value, "\"") : value) + (Object.keys(row).length - 1 === i ? '' : separator) + (Object.keys(row).length - 1 === i ? '\n' : '');
    });
  });
  return csv;
};

exports.convertArrayOfObjectsToCSV = convertArrayOfObjectsToCSV;